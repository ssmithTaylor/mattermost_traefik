version: '3.6'
networks:
  # network for App <-> DB transactions
  mm-in:
    driver: overlay
    internal: true
  # this network faces the outside world
  mm-out:
    driver: overlay
volumes:
  mm-dbdata:
    driver_opts:
      type: "nfs"
      o: "addr=efs_ip,rw,bg,hard,nointr,rsize=32768,wsize=32768,tcp,actimeo=0,nfsvers=4.1,timeo=600"
      device: ":/postgres"
  mm-app:
    driver_opts:
      type: "nfs"
      o: "addr=efs_ip,rw,nfsvers=4.1,async,nolock,soft"
      device: ":/mattermost"
  traefik-certs:
    driver_opts:
      type: "nfs"
      o: "addr=efs_ip,rw,nfsvers=4.1,async,nolock,soft"
      device: ":/traefik"
services:
  mm_db:
    # use official mattermost prod-db image
    image: mattermost/mattermost-prod-db:5.14.1
    networks:
      - mm-in
    volumes:
      # use a named-volume for data persistency
      #- mm-dbdata:/var/lib/postgresql/data
      - /etc/localtime:/etc/localtime:ro
    environment:
      - POSTGRES_USER=postgres_user
      - POSTGRES_PASSWORD=postgres_user_password
      - POSTGRES_DB=mattermost
      - edition=team
      # uncomment the following to enable backup
      # - AWS_ACCESS_KEY_ID=XXXX
      # - AWS_SECRET_ACCESS_KEY=XXXX
      # - WALE_S3_PREFIX=s3://BUCKET_NAME/PATH
      # - AWS_REGION=us-east-1
    deploy:
      restart_policy:
        condition: on-failure
  mm_app:
    # use official mattermost prod-app image
    image: mattermost/mattermost-prod-app:5.14.1
    networks:
      - mm-in
      - mm-out
    volumes:
      - mm-app:/mattermost/:rw
      - /etc/localtime:/etc/localtime:ro
    environment:
      # use service's hostname
      - DB_HOST=mm_db
      # talk to the port within the overlay network
      # without (over)exposing ports
      - DB_PORT_NUMBER=5432
      - MM_USERNAME=postgres_user
      - MM_PASSWORD=postgres_user_password
      - MM_DBNAME=mattermost
      # pass the edition to be used, default is enterprise
      # setting this env var will make the app use the team edition
      - edition=team
      # in case your config is not in default location
      # - MM_CONFIG=/mattermost/config/config.json
    deploy:
      labels:
        - "traefik.backend.LoadBalancer.Stickiness=true"
        - "traefik.backend.loadbalancer.swarm=true"
        # the backend service needs a name
        - "traefik.backend=mmapp"
        # network is prefixed `mm_` as well
        - "traefik.docker.network=mattermost_mm-out"
        # generate a TLS cert for this domain
        - "traefik.entrypoints=https"
        - "traefik.defaultentrypoints=http,https"
        - "traefik.frontend.passHostHeader=true"
        # add your domain below here
        - "traefik.frontend.rule=Host:mattermost.webaddress.com"
        - "traefik.port=8000"
      restart_policy:
        condition: on-failure
  mm_web:
  # use official traefik image
    image: traefik
    ports:
      - "80:80"
      # you can view the traefik's dashboard in http://localhost:8080
      - "8080:8080"
      - "443:443"
    networks:
      - mm-out
    command: >
      --defaultentrypoints="https,http"
      --entryPoints="Name:http Address::80"
      --entryPoints="Name:https Address::443 TLS"
      --acme.email="email@email.com"
      --acme.entrypoint=https
      --acme.onhostrule=true
      --acme.storage="acme/certs.json"
      --acme.acmelogging
      --acme.httpchallenge.entrypoint="http"
      --docker
      --docker.domain=docker.localhost
      --docker.swarmmode
      --docker.watch
      --logLevel=DEBUG
      --retry
      --api
    volumes:
      # traefik needs the docker socket in order to work properly
      - /var/run/docker.sock:/var/run/docker.sock
      # no traefik config file is being used
      # you can deep further in the traefik docs
      # http://docs.traefik.io/user-guide/examples/
      - /dev/null:/traefik.toml
      # use a named-volume for certs persistency
      - traefik-certs:/acme
    deploy:
      placement:
        max_replicas_per_node: 1
      mode: replicated
      replicas: 3
      restart_policy:
       condition: on-failure